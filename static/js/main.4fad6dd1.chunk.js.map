{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getFillRectDataFromStartEnd","startX","startY","endX","endY","Math","min","abs","getArcDataFromStartEnd","x1","y1","x2","y2","xs","ys","sqrt","getDistance","PI","getMousePosition","canvas","evt","rect","getBoundingClientRect","x","clientX","left","right","width","y","clientY","top","bottom","height","RectCircleColliding","circle","distX","w","distY","h","r","dx","dy","App","ctx","useRef","canvasRef","initialPosition","useState","structureType","setStructureType","structures","setStructures","isMouseDown","plotStructures","current","clearRect","forEach","structure","drawStructure","stroke","drawSquare","fill","squareData","fillRect","strokeRect","data","type","circleData","arc","drawCircle","initial","final","useEffect","length","className","onClick","e","filter","square","find","circleX","circleY","radius","i","j","fillSquare","id","onMouseDown","onMouseUp","onMouseMove","persist","ref","el","container","document","getElementById","containerRect","getContext","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4fad6dd1.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\nimport './App.scss';\n\ninterface Coordinate{\n  x: number;\n  y: number;\n}\n\ninterface Structure{\n  type: 'square' | 'circle';\n  initial: Coordinate;\n  final: Coordinate;\n}\n\nfunction getDistance( x1: number, y1: number, x2: number, y2: number ) {\n\t\n\tlet \txs = x2 - x1, ys = y2 - y1;\t\t\n\txs *= xs;\n\tys *= ys;\n\treturn Math.sqrt( xs + ys );\n};\n\nfunction getFillRectDataFromStartEnd(startX: number, startY: number, endX: number, endY: number):[number, number, number, number]{\n  return [Math.min(startX, endX), Math.min(startY, endY), Math.abs(endX-startX), Math.abs(endY-startY)]\n}\n\nfunction getArcDataFromStartEnd(\n  startX: number,\n  startY: number,\n  endX: number,\n  endY: number\n): [number, number, number, number, number, boolean] {\n  const originX = Math.abs(endX+startX) / 2\n  const originY = Math.abs(endY+startY) / 2\n  const radius = getDistance(startX, startY, endX, endY) / 2\n  return [\n    originX,\t\n    originY,\n    radius,\n    0,\n    2 * Math.PI,\n    false\n  ];\n}\nfunction getMousePosition(canvas:HTMLCanvasElement, evt: React.MouseEvent<HTMLCanvasElement, MouseEvent>){\n  const rect = canvas.getBoundingClientRect()\n  return {\n    x: ((evt.clientX - rect.left) / (rect.right - rect.left)) * canvas.width,\n    y: ((evt.clientY - rect.top) / (rect.bottom - rect.top)) * canvas.height,\n  };\n}\n\ninterface Circle{\n  x: number;\n  y: number;\n  r: number;\n}\n\ninterface Rectangle{\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nfunction RectCircleColliding(circle:Circle, rect: Rectangle) {\n  var distX = Math.abs(circle.x - rect.x - rect.w / 2);\n  var distY = Math.abs(circle.y - rect.y - rect.h / 2);\n\n  if (distX > rect.w / 2 + circle.r) {\n    return false;\n  }\n  if (distY > rect.h / 2 + circle.r) {\n    return false;\n  }\n\n  if (distX <= rect.w / 2) {\n    return true;\n  }\n  if (distY <= rect.h / 2) {\n    return true;\n  }\n\n  var dx = distX - rect.w / 2;\n  var dy = distY - rect.h / 2;\n  return dx * dx + dy * dy <= circle.r * circle.r;\n}\n\nfunction App() {\n  const ctx = useRef<CanvasRenderingContext2D | null>(null)\n  const canvasRef = useRef<HTMLCanvasElement|null>(null)\n  const initialPosition= useRef<Coordinate>({x: 0, y: 0})\n\n  const [structureType, setStructureType] = useState<'square' | 'circle'>('square')\n  const [structures, setStructures] = useState<Structure[]>([])\n  const isMouseDown = useRef(false)\n\n\n  function canvasRefCallback(el: HTMLCanvasElement){\n    if(!el) return\n    const container = document.getElementById(\"main\")\n    if(!container) return\n    const containerRect = container.getBoundingClientRect()\n    ctx.current = el.getContext(\"2d\");\n    canvasRef.current = el\n    canvasRef.current.width = containerRect.width\n    canvasRef.current.height = containerRect.height;\n  }\n\n  function fillSquare(startX: number, startY: number, endX: number, endY: number){\n    let oneUnit = 10 // px\n    const circle = structures.find(structure=>structure.type === 'circle')\n    if(!circle) return\n    const [circleX, circleY, radius] = getArcDataFromStartEnd(circle?.initial.x, circle?.initial.y, circle?.final.x, circle?.final.y)\n    for(let i = startX + oneUnit; i + oneUnit < endX; i+=15){\n      for(let j = startY + oneUnit ; j + oneUnit < endY; j+=15 ){\n\n        const isColliding = RectCircleColliding(\n          { x: circleX, y: circleY, r: radius },\n          { x: i, y: j, w: oneUnit, h: oneUnit }\n        );\n        if(!isColliding) drawSquare(i, j, i + oneUnit, j+oneUnit, true)\n      }\n    }\n  }\n\n  function tile(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    structures.filter(({type})=>type==='square').forEach(square=>fillSquare(square.initial.x, square.initial.y, square.final.x, square.final.y))\n  }\n\n  function plotStructures(){\n    if (!ctx.current) return;\n    if(!canvasRef.current) return\n    ctx.current.clearRect(\n      0,\n      0,\n      canvasRef.current.width,\n      canvasRef.current.height\n    );\n    structures.forEach(structure=>drawStructure(structure))\n    ctx.current.stroke()\n  }\n\n  useEffect(()=>{\n    plotStructures()\n  },[structures.length, structureType])\n\n  function handleMouseDown(\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) {\n    if(!canvasRef.current) return\n    isMouseDown.current = true\n    const {x, y} = getMousePosition(canvasRef.current, e)\n    initialPosition.current = {x, y}\n  }\n\n  function handleMouseUp(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n    isMouseDown.current = false\n    if(!canvasRef.current) return\n    const {x, y} = getMousePosition(canvasRef.current, e)\n    if(initialPosition.current.x === x && initialPosition.current.y === y) return\n    setStructures((structures) => [\n      ...structures,\n      {\n        type: structureType,\n        initial: initialPosition.current,\n        final: { x, y },\n      },\n    ]);\n  }\n\n  function drawCircle(x1: number, y1: number, x2: number, y2: number){\n    if(!ctx.current) return\n    const circleData = getArcDataFromStartEnd(\n      x1,\n      y1,\n      x2,\n      y2\n    );\n    ctx.current.arc(...circleData);\n  }\n\n  function drawSquare(x1: number, y1: number, x2: number, y2: number, fill=false){\n    if (!ctx.current) return;\n    const squareData = getFillRectDataFromStartEnd(\n          x1,\n          y1,\n          x2,\n          y2\n        )\n      if(!fill) ctx.current.strokeRect(\n        ...squareData\n      );\n      else{\n        ctx.current.fillRect(...squareData)\n      }\n  }\n\n  function drawStructure(data: Structure){\n    if (data.type === 'circle') drawCircle(data.initial.x, data.initial.y, data.final.x, data.final.y)\n    if (data.type === \"square\") drawSquare(data.initial.x, data.initial.y, data.final.x, data.final.y);\n  }\n\n  function handleMouseMove(\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) {\n    e.persist()\n    if(!isMouseDown.current) return\n    if(!ctx.current) return\n    if(!canvasRef.current) return\n    const { x, y } = getMousePosition(canvasRef.current, e);\n    ctx.current.clearRect(0 , 0, canvasRef.current.width, canvasRef.current.height)\n    plotStructures()\n    drawStructure({type: structureType, initial: initialPosition.current, final: {x, y}})\n    ctx.current.stroke();\n  }\n\n  function reset(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    if (!ctx.current) return;\n    if (!canvasRef.current) return;\n    setStructures([])\n    ctx.current.clearRect(\n      0,\n      0,\n      canvasRef.current.width,\n      canvasRef.current.height\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span\n          className={`square structure ${\n            structureType === \"square\" ? \"active\" : \"\"\n          }`}\n          onClick={(e) =>\n            setStructureType((structure) =>\n              structure === \"circle\" ? \"square\" : \"circle\"\n            )\n          }\n        />\n        <span\n          className={`circle structure ${\n            structureType === \"circle\" ? \"active\" : \"\"\n          }`}\n          onClick={(e) =>\n            setStructureType((structure) =>\n              structure === \"circle\" ? \"square\" : \"circle\"\n            )\n          }\n        />\n        <button type=\"button\" onClick={tile}>Tile</button>\n        <button onClick={reset}>Clear</button>\n      </header>\n      <main id=\"main\">\n        <canvas\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n          onMouseMove={handleMouseMove}\n          ref={canvasRefCallback}\n          id=\"canvas\"\n          className=\"canvas\"\n        ></canvas>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}